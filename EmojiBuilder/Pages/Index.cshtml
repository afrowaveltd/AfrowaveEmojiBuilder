@page
@model EmojiBuilder.Pages.IndexModel
@{
    ViewData["Title"] = "Emoji Overview";
}

@section Scripts {
    <script src="/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        let connection;

        async function startSignalR() {
            connection = new signalR.HubConnectionBuilder()
                .withUrl("/emojihub")
                .build();

            connection.on("EmojiUpdated", (utf) => {
                console.log("Updated:", utf);
                const row = document.querySelector(`tr[data-utf='${utf}']`);
                if (row) {
                    row.classList.add("modified");
                    row.classList.remove("unmodified");
                    row.style.transition = "background-color 0.5s";
                    row.style.backgroundColor = "#d4ffd4"; // zelené zvýraznění
                    setTimeout(() => row.style.backgroundColor = "", 1500);
                }
            });

            await connection.start();
            console.log("SignalR connected");
        }

        async function saveChanges(index) {
            const categories = Array.from(document.getElementById("cat-" + index).selectedOptions).map(o => parseInt(o.value));
            const subcategories = Array.from(document.getElementById("sub-" + index).selectedOptions).map(o => parseInt(o.value));
            const skinTone = document.getElementById("tone-" + index).checked;

            const emojiUtf = document.querySelectorAll(".toggle-row")[index].closest("tr").children[1].innerText;

            await connection.invoke("SaveEmojiEdit", {
                utf: emojiUtf,
                categories,
                subcategories,
                supportsSkinTone: skinTone
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            startSignalR();
            document.querySelectorAll('.toggle-row').forEach(button => {
                button.addEventListener('click', () => {
                    const target = button.closest('tr').nextElementSibling;
                    if (target && target.classList.contains('details-row')) {
                        target.style.display = target.style.display === 'table-row' ? 'none' : 'table-row';
                        button.textContent = target.style.display === 'table-row' ? '▼' : '▶';
                    }
                });
            });
        });
    </script>
}

<h2>🧱 Emoji Overview</h2>

<table style="margin-bottom: 2rem;">
    <thead>
        <tr><th colspan="3">Summary</th></tr>
    </thead>
    <tbody>
        <tr>
            <td>Total from JSON:</td>
            <td>@Model.Total</td>
        </tr>
        <tr>
            <td>Exists in DB:</td>
            <td>@Model.InDb</td>
        </tr>
        <tr>
            <td>Supports skin tone:</td>
            <td>@Model.WithSkinTone</td>
        </tr>
    </tbody>
</table>

<table>
    <thead>
        <tr>
            <th></th>
            <th>Default</th>
            <th>Dark Tone</th>
            <th>Name</th>
            <th>Exists in DB</th>
            <th>Supports Skin Tone</th>
        </tr>
    </thead>
    <tbody>
        @for(int i = 0; i < Model.EmojiList.Count; i++)
        {
            var emoji = Model.EmojiList[i];
            var defaultChar = emoji.Source.Utf8String;
            var darkChar = emoji.Source.Utf8String + "🏿";
            <tr data-utf="@defaultChar" class="@(emoji.ExistsInDb ? "modified" : "unmodified")">
                <td><button type="button" class="toggle-row" data-index="@i">▶</button></td>
                <td>@defaultChar</td>
                <td>@darkChar</td>
                <td>@emoji.Source.Name</td>
                <td>@(emoji.ExistsInDb ? "✔" : "✘")</td>
                <td>@(emoji.SupportsSkinTone ? "✔" : "✘")</td>
            </tr>
            <tr class="details-row" style="display: none; background-color: #eef;">
                <td colspan="6">
                    <div style="display: flex; gap: 2rem;">
                        <div>
                            <label><strong>Categories:</strong></label><br />
                            <select multiple style="width: 200px;" id="cat-@i">
                                @foreach(var cat in Model.Categories)
                                {
                                    <option value="@cat.Id">@cat.Name</option>
                                }
                            </select>
                        </div>
                        <div>
                            <label><strong>Subcategories:</strong></label><br />
                            <select multiple style="width: 200px;" id="sub-@i">
                                @foreach(var sub in Model.Subcategories)
                                {
                                    <option value="@sub.Id">@sub.Name</option>
                                }
                            </select>
                        </div>
                        <div>
                            <label><strong>Skin tone supported:</strong></label><br />
                            <input type="checkbox" id="tone-@i" />
                        </div>
                        <div>
                            <button type="button" onclick="saveChanges(@i)">💾 Save</button>
                        </div>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>
